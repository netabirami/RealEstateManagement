package com.example.RealEstateManagement.controller;

import com.example.RealEstateManagement.model.Property;
import com.example.RealEstateManagement.service.PropertyService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.stream.Stream;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(PropertyController.class)
@AutoConfigureMockMvc(addFilters = false)
public class PropertyControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @MockBean
    private PropertyService propertyService;

    @Test
    @DisplayName("Should be able to get all the properties")
    public void testGetAllProperty() throws Exception {
        List<Property> mockProperties = new ArrayList<>();
        Property property = new Property(
                1L,
                "123 Main St",
                "Apartment",
                249899.0,
                2000.0,
                3,
                2,
                new Date(2023, 12, 19),
                null
        );
        mockProperties.add(property);
        when(propertyService.getAllProperty()).thenReturn(mockProperties);

        mockMvc.perform(get("/properties"))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(1))
                .andExpect(jsonPath("$[0].address").value("123 Main St"));
    }

    @Test
    @DisplayName("Should be able to create a new property")
    public void testCreateProperty() throws Exception {
        Property newProperty = new Property(
                (Long) null, // id is expected to be generated by the system
                "456 Oak St",
                "House",
                349999.0,
                100.0,
                4,
                3,
                new Date(2023, 12, 20),
                null
        );

        String jsonRequest = new ObjectMapper().writeValueAsString(newProperty);

        mockMvc.perform(post("/properties")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonRequest))
                .andExpect(status().isOk());

        verify(propertyService, times(1)).createProperty(any(Property.class));
    }

    @Test
    @DisplayName("Should be able to delete a property by ID")
    public void testDeletePropertyById() throws Exception {
        doNothing().when(propertyService).deleteProperty(1L);

        mockMvc.perform(delete("/properties/{id}", 1L))
                .andExpect(status().isOk());

        verify(propertyService, times(1)).deleteProperty(1L);
    }

    @Test
    @DisplayName("Should be able to update an existing property")
    public void testUpdateProperty() throws Exception {
        Property existingProperty = new Property(
                1L,
                "456 Oak St",
                "House",
                349999.0,
                100.0,
                4,
                3,
                new Date(2023, 12, 20),
                null
        );

        when(propertyService.getPropertyById(1L)).thenReturn(existingProperty);

        existingProperty.setPrice(399999.0);

        doNothing().when(propertyService).updateProperty(existingProperty);

        String jsonRequest = new ObjectMapper().writeValueAsString(existingProperty);

        mockMvc.perform(put("/properties/{id}", 1L)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonRequest))
                .andExpect(status().isOk());

        verify(propertyService, times(1)).updateProperty(any(Property.class));
    }

    @ParameterizedTest
    @MethodSource("getPropertyInputs")
    @DisplayName("Should not create a new property with invalid fields")
    public void testInvalidPropertyFields(
            Property newProperty,
            String errorKey,
            String errorMessage
    ) throws Exception {

        String jsonRequest = new ObjectMapper().writeValueAsString(newProperty);

        mockMvc.perform(post("/properties")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonRequest))
                .andExpect(status().isBadRequest())
                .andExpect(MockMvcResultMatchers.jsonPath("$." + errorKey).value(errorMessage));

        verify(propertyService, times(0)).createProperty(any(Property.class));
    }

    static Stream<Arguments> getPropertyInputs() {
        Calendar calendar1 = Calendar.getInstance();
        calendar1.add(Calendar.DATE, -10);
        Date pastDate = calendar1.getTime();

        Calendar calendar2 = Calendar.getInstance();
        calendar2.add(Calendar.DATE, 10);
        Date futureDate = calendar2.getTime();
        return Stream.of(
                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        null,
                        "House",
                        349999.0,
                        100.0,
                        4,
                        3,
                        new Date(2023, 12, 20),
                        null
                ), "address", "The Address should not be Null."),
                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        null,
                        349999.0,
                        100.0,
                        4,
                        3,
                        new Date(2023, 12, 20),
                        null
                ), "buildingType", "The Building Type should not be Null."),

                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        null,
                        100.0,
                        4,
                        3,
                        new Date(2023, 12, 20),
                        null
                ), "price", "The Price should not be Null."),

                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        349999.0,
                        null,
                        4,
                        3,
                        new Date(2023, 12, 20),
                        null
                ), "area", "The Area should not be Null."),

                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        349999.0,
                        2000.0,
                        null,
                        3,
                        new Date(2023, 12, 20),
                        null
                ), "bedrooms", "The number of bedrooms should not be Null."),

                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        349999.0,
                        2000.0,
                        3,
                        null,
                        new Date(2023, 12, 20),
                        null
                ), "bathrooms", "The number of Bathroom should not be Null."),
                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        349999.0,
                        2000.0,
                        3,
                        2,
                        pastDate,
                        null
                ), "listingDate", "The date should be in Future."),
                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        349999.0,
                        2000.0,
                        3,
                        2,
                        null,
                        null
                ), "listingDate", "The date cannot be Null."),


                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "invalid Building Type",
                        349999.0,
                        100.0,
                        4,
                        3,
                        futureDate,
                        null
                ), "buildingType", "Invalid building type. It should be either 'House' or 'Apartment'."),

                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        100000.0,
                        100.0,
                        4,
                        3,
                        futureDate,
                        null
                ), "price", "must be greater than or equal to 200000"),

                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        4000000.0,
                        100.0,
                        4,
                        3,
                        futureDate,
                        null
                ), "price", "must be less than or equal to 1000000"),

                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        500000.0,
                        100.0,
                        1,
                        3,
                        futureDate,
                        null
                ), "bedrooms", "must be greater than or equal to 2"),
                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        500000.0,
                        100.0,
                        7,
                        3,
                        futureDate,
                        null
                ), "bedrooms", "must be less than or equal to 5"),

                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        500000.0,
                        100.0,
                        2,
                        4,
                        futureDate,
                        null
                ), "bathrooms", "must be less than or equal to 3"),
                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        500000.0,
                        100.0,
                        2,
                        0,
                        futureDate,
                        null
                ), "bathrooms", "must be greater than or equal to 1"),

                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        500000.0,
                        700.0,
                        2,
                        0,
                        futureDate,
                        null
                ), "area", "must be less than or equal to 600"),

                Arguments.of(new Property(
                        (Long) null, // id is expected to be generated by the system
                        "110 Main S",
                        "House",
                        500000.0,
                        30.0,
                        2,
                        0,
                        futureDate,
                        null
                ), "area", "must be greater than or equal to 40")
        );
    }
}
