package com.example.RealEstateManagement.controller;

import com.example.RealEstateManagement.model.Property;
import com.example.RealEstateManagement.service.PropertyService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(PropertyController.class)
public class PropertyControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @MockBean
    private PropertyService propertyService;
    @Test
    @DisplayName("Should be able to get all the properties")
    public void testGetAllProperty() throws Exception {
        List<Property> mockProperties = new ArrayList<>();
        Property property = new Property(
                1L,
                "123 Main St",
                "Apartment",
                249899.0,
                2000,
                3,
                2,
                new Date(2023, 12, 19),
                null
        );
        mockProperties.add(property);
        when(propertyService.getAllProperty()).thenReturn(mockProperties);

        mockMvc.perform(get("/properties"))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(1))
                .andExpect(jsonPath("$[0].address").value("123 Main St"));
    }
    @Test
    @DisplayName("Should be able to create a new property")
    public void testCreateProperty() throws Exception {
        Property newProperty = new Property(
                null, // id is expected to be generated by the system
                "456 Oak St",
                "House",
                349999.0,
                2500,
                4,
                3,
                new Date(2023, 12, 20),
                null
        );

        String jsonRequest = new ObjectMapper().writeValueAsString(newProperty);

        mockMvc.perform(post("/properties")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonRequest))
                .andExpect(status().isOk());

        verify(propertyService, times(1)).createProperty(any(Property.class));
    }

    @Test
    @DisplayName("Should be able to delete a property by ID")
    public void testDeletePropertyById() throws Exception {
        doNothing().when(propertyService).deleteProperty(1L);

        mockMvc.perform(delete("/properties/{id}", 1L))
                .andExpect(status().isOk());

        verify(propertyService, times(1)).deleteProperty(1L);
    }

    @Test
    @DisplayName("Should be able to update an existing property")
    public void testUpdateProperty() throws Exception {
        Property existingProperty = new Property(
                1L,
                "456 Oak St",
                "House",
                349999.0,
                2500,
                4,
                3,
                new Date(2023, 12, 20),
                null
        );

        when(propertyService.getPropertyById(1L)).thenReturn(existingProperty);

        existingProperty.setPrice(399999.0);

        doNothing().when(propertyService).updateProperty(existingProperty);

        String jsonRequest = new ObjectMapper().writeValueAsString(existingProperty);

        mockMvc.perform(put("/properties/{id}", 1L)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonRequest))
                .andExpect(status().isOk());

        verify(propertyService, times(1)).updateProperty(any(Property.class));
    }
}
